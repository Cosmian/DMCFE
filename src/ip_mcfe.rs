use crate::{ipfe, tools};
use bls12_381::{G1Projective, Scalar};
use eyre::Result;

/// MCFE cyphertext type
pub type CypherText = G1Projective;

/// MCFE encryption key type
/// - `eki`:        private key `eki = Si`
/// - `ip_mski`:    IPFE master secret key
#[derive(Clone)]
pub struct EncryptionKey {
    s: Vec<Vec<Scalar>>,
    msk: Vec<Scalar>,
}

/// MCFE partial decryption key type
/// - `yi`:     decryption function associated to the client contributions
/// - `di`:     client contribution to the decrytion key, `di = Si^T.yi`
/// - `ip_dki`: IPFE decryption key for this client contributions
pub struct PartialDecryptionKey {
    yi: Vec<Scalar>,
    di: [Scalar; 2],
    ip_dki: Scalar,
}

/// MCFE decryption key type
/// - `y`:      the decryption function
/// - `d`:      the MCFE `dk_y = Sum(Si^T.yi)`
/// - `ip_dk`:  IPFE decryption key
pub struct DecryptionKey {
    y: Vec<Vec<Scalar>>,
    d: Vec<Scalar>,
    ip_dk: Vec<Scalar>,
}

/// Compute the client encryption keys.
/// - `n`: number of clients
/// - `m`: number of contributions per client
pub fn setup(n: usize, m: usize) -> Vec<EncryptionKey> {
    (0..n)
        .map(|_| {
            let (msk, _) = ipfe::setup(m);
            EncryptionKey {
                s: tools::random_mat_gen(m, 2),
                msk,
            }
        })
        .collect()
}

/// Encrypts the data of a client `i` using its encryption key for a given label.
/// - `eki`:    client encription key;
/// - `xi`:     client contribution;
/// - `l`:      label
pub fn encrypt(eki: &EncryptionKey, xi: &[Scalar], l: usize) -> Result<Vec<CypherText>> {
    let (p1, p2) = tools::double_hash_to_curve(l);
    let Ul = tools::hash_to_curve(l);
    let R1 = tools::mat_mul(&eki.s, &[p1, p2])?;
    let R2: Vec<G1Projective> = eki.msk.iter().map(|si| Ul * si).collect();
    let ci: Vec<G1Projective> = xi
        .iter()
        .zip(R1.iter())
        .map(|(xij, r)| r + G1Projective::generator() * xij)
        .collect();

    Ok(ci.iter().zip(R2.iter()).map(|(cij, r)| r + cij).collect())
}

/// Compute the partial decryption key for a client `i`.
/// - `eki`: the encryption key of a client `i`;
/// - `yi`: the vector associated to the decryption function for a client `i`.
pub fn dkey_gen(eki: &EncryptionKey, yi: &[Scalar]) -> Result<PartialDecryptionKey> {
    let dky_i = tools::scal_mat_mul_dim_2(&tools::transpose(&eki.s)?, yi)?;
    eyre::ensure!(
        2 == dky_i.len(),
        "Wrong size for dky_i: {}, should be 2!",
        dky_i.len()
    );
    Ok(PartialDecryptionKey {
        yi: (*yi).to_vec(),
        di: [dky_i[0], dky_i[1]],
        ip_dki: yi
            .iter()
            .zip(eki.msk.iter())
            .map(|(yij, sij)| yij * sij)
            .sum(),
    })
}

/// Compute the decryption key given the `n` partial decryption keys from the clients.
/// - `dk`: partial decryption keys generated by the clients
pub fn key_comb(dki_vec: &[PartialDecryptionKey]) -> Result<DecryptionKey> {
    let mut y = Vec::with_capacity(dki_vec.len());
    let mut d = vec![Scalar::zero(); 2];
    let mut ip_dk = Vec::with_capacity(dki_vec.len());

    dki_vec.iter().for_each(|dki| {
        y.push(dki.yi.to_vec());
        d[0] += dki.di[0];
        d[1] += dki.di[1];
        ip_dk.push(dki.ip_dki);
    });

    Ok(DecryptionKey { y, d, ip_dk })
}

/// Decrypt the given cyphertexts of a given label using the decryption key.
/// - `C`:  the cyphertexts
/// - `dk`: the decryption key
/// - `l`:  the label
pub fn decrypt(C: &[Vec<CypherText>], dk: &DecryptionKey, l: usize) -> G1Projective {
    let Ul = tools::hash_to_curve(l);
    let dl: Vec<G1Projective> = C
        .iter()
        .zip(dk.y.iter())
        .zip(dk.ip_dk.iter())
        .map(|((Ci, yi), ip_dki)| {
            // IPFE decryption process
            Ci.iter()
                .zip(yi.iter())
                .map(|(Cij, yij)| Cij * yij)
                .sum::<G1Projective>()
                - Ul * ip_dki
        })
        .collect();

    // compute `d^T.[u_l]`
    let double_Ul = tools::double_hash_to_curve(l);
    let d: G1Projective = double_Ul.0 * dk.d[0] + double_Ul.1 * dk.d[1];

    dl.iter().sum::<G1Projective>() - d
}
